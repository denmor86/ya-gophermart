// Code generated by MockGen. DO NOT EDIT.
// Source: internal\storage\storage.go
//
// Generated by this command:
//
//	mockgen -source=internal\storage\storage.go -destination=internal\storage\mocks\storage_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/denmor86/ya-gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
	isgomock struct{}
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockIStorage) AddOrder(ctx context.Context, number, userUUID string, uploadetAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, number, userUUID, uploadetAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockIStorageMockRecorder) AddOrder(ctx, number, userUUID, uploadetAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockIStorage)(nil).AddOrder), ctx, number, userUUID, uploadetAt)
}

// AddUser mocks base method.
func (m *MockIStorage) AddUser(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIStorageMockRecorder) AddUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIStorage)(nil).AddUser), ctx, login, password)
}

// ClaimOrdersForProcessing mocks base method.
func (m *MockIStorage) ClaimOrdersForProcessing(ctx context.Context, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimOrdersForProcessing", ctx, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimOrdersForProcessing indicates an expected call of ClaimOrdersForProcessing.
func (mr *MockIStorageMockRecorder) ClaimOrdersForProcessing(ctx, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimOrdersForProcessing", reflect.TypeOf((*MockIStorage)(nil).ClaimOrdersForProcessing), ctx, count)
}

// Close mocks base method.
func (m *MockIStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIStorage)(nil).Close))
}

// GetOrder mocks base method.
func (m *MockIStorage) GetOrder(ctx context.Context, number string) (*models.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, number)
	ret0, _ := ret[0].(*models.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockIStorageMockRecorder) GetOrder(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockIStorage)(nil).GetOrder), ctx, number)
}

// GetOrders mocks base method.
func (m *MockIStorage) GetOrders(ctx context.Context, userUUID string) ([]models.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userUUID)
	ret0, _ := ret[0].([]models.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockIStorageMockRecorder) GetOrders(ctx, userUUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockIStorage)(nil).GetOrders), ctx, userUUID)
}

// GetUser mocks base method.
func (m *MockIStorage) GetUser(ctx context.Context, login string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIStorageMockRecorder) GetUser(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIStorage)(nil).GetUser), ctx, login)
}

// Ping mocks base method.
func (m *MockIStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIStorage)(nil).Ping), ctx)
}
