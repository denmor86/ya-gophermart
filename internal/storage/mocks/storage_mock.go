// Code generated by MockGen. DO NOT EDIT.
// Source: internal\storage\storage.go
//
// Generated by this command:
//
//	mockgen -source=internal\storage\storage.go -destination=internal\storage\mocks\storage_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/denmor86/ya-gophermart/internal/models"
	decimal "github.com/shopspring/decimal"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersStorage is a mock of UsersStorage interface.
type MockUsersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUsersStorageMockRecorder
	isgomock struct{}
}

// MockUsersStorageMockRecorder is the mock recorder for MockUsersStorage.
type MockUsersStorageMockRecorder struct {
	mock *MockUsersStorage
}

// NewMockUsersStorage creates a new mock instance.
func NewMockUsersStorage(ctrl *gomock.Controller) *MockUsersStorage {
	mock := &MockUsersStorage{ctrl: ctrl}
	mock.recorder = &MockUsersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersStorage) EXPECT() *MockUsersStorageMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUsersStorage) AddUser(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUsersStorageMockRecorder) AddUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUsersStorage)(nil).AddUser), ctx, login, password)
}

// GetUser mocks base method.
func (m *MockUsersStorage) GetUser(ctx context.Context, login string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUsersStorageMockRecorder) GetUser(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUsersStorage)(nil).GetUser), ctx, login)
}

// GetUserBalance mocks base method.
func (m *MockUsersStorage) GetUserBalance(ctx context.Context, login string) (*models.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", ctx, login)
	ret0, _ := ret[0].(*models.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockUsersStorageMockRecorder) GetUserBalance(ctx, login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockUsersStorage)(nil).GetUserBalance), ctx, login)
}

// MockOrdersStorage is a mock of OrdersStorage interface.
type MockOrdersStorage struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersStorageMockRecorder
	isgomock struct{}
}

// MockOrdersStorageMockRecorder is the mock recorder for MockOrdersStorage.
type MockOrdersStorageMockRecorder struct {
	mock *MockOrdersStorage
}

// NewMockOrdersStorage creates a new mock instance.
func NewMockOrdersStorage(ctrl *gomock.Controller) *MockOrdersStorage {
	mock := &MockOrdersStorage{ctrl: ctrl}
	mock.recorder = &MockOrdersStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersStorage) EXPECT() *MockOrdersStorageMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockOrdersStorage) AddOrder(ctx context.Context, number, userID string, createdAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, number, userID, createdAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockOrdersStorageMockRecorder) AddOrder(ctx, number, userID, createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockOrdersStorage)(nil).AddOrder), ctx, number, userID, createdAt)
}

// ClaimOrdersForProcessing mocks base method.
func (m *MockOrdersStorage) ClaimOrdersForProcessing(ctx context.Context, count int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimOrdersForProcessing", ctx, count)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimOrdersForProcessing indicates an expected call of ClaimOrdersForProcessing.
func (mr *MockOrdersStorageMockRecorder) ClaimOrdersForProcessing(ctx, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimOrdersForProcessing", reflect.TypeOf((*MockOrdersStorage)(nil).ClaimOrdersForProcessing), ctx, count)
}

// GetOrder mocks base method.
func (m *MockOrdersStorage) GetOrder(ctx context.Context, number string) (*models.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, number)
	ret0, _ := ret[0].(*models.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrdersStorageMockRecorder) GetOrder(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrdersStorage)(nil).GetOrder), ctx, number)
}

// GetOrders mocks base method.
func (m *MockOrdersStorage) GetOrders(ctx context.Context, userID string) ([]models.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userID)
	ret0, _ := ret[0].([]models.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrdersStorageMockRecorder) GetOrders(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrdersStorage)(nil).GetOrders), ctx, userID)
}

// UpdateOrderAndBalance mocks base method.
func (m *MockOrdersStorage) UpdateOrderAndBalance(ctx context.Context, number, status string, accrual decimal.Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderAndBalance", ctx, number, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderAndBalance indicates an expected call of UpdateOrderAndBalance.
func (mr *MockOrdersStorageMockRecorder) UpdateOrderAndBalance(ctx, number, status, accrual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderAndBalance", reflect.TypeOf((*MockOrdersStorage)(nil).UpdateOrderAndBalance), ctx, number, status, accrual)
}

// MockLoyaltysStorage is a mock of LoyaltysStorage interface.
type MockLoyaltysStorage struct {
	ctrl     *gomock.Controller
	recorder *MockLoyaltysStorageMockRecorder
	isgomock struct{}
}

// MockLoyaltysStorageMockRecorder is the mock recorder for MockLoyaltysStorage.
type MockLoyaltysStorageMockRecorder struct {
	mock *MockLoyaltysStorage
}

// NewMockLoyaltysStorage creates a new mock instance.
func NewMockLoyaltysStorage(ctrl *gomock.Controller) *MockLoyaltysStorage {
	mock := &MockLoyaltysStorage{ctrl: ctrl}
	mock.recorder = &MockLoyaltysStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoyaltysStorage) EXPECT() *MockLoyaltysStorageMockRecorder {
	return m.recorder
}

// AddWithdrawal mocks base method.
func (m *MockLoyaltysStorage) AddWithdrawal(ctx context.Context, loyalty models.WithdrawalData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWithdrawal", ctx, loyalty)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWithdrawal indicates an expected call of AddWithdrawal.
func (mr *MockLoyaltysStorageMockRecorder) AddWithdrawal(ctx, loyalty any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWithdrawal", reflect.TypeOf((*MockLoyaltysStorage)(nil).AddWithdrawal), ctx, loyalty)
}

// GetWithdrawals mocks base method.
func (m *MockLoyaltysStorage) GetWithdrawals(ctx context.Context, userID string) ([]models.WithdrawalData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.WithdrawalData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockLoyaltysStorageMockRecorder) GetWithdrawals(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockLoyaltysStorage)(nil).GetWithdrawals), ctx, userID)
}
